var/list/ResourceZPlanes=list()
var/SpotsPerReward=10
mob/Admin4/verb
	Resource_Specific_Plane(var/Plane as num|null, var/Spots as num|null)
		set category="Admin"
		if(Plane&&Spots)
			RSSpotGeneration(Plane, Spots)
			Log("Admin", "[ExtractInfo(usr)] seeded Z Plane [Plane] with [Spots] resource spots!")
	Resource_Z_Plane_Add()
		set category="Admin"
		var/Option=input(usr, "What Z plane would you like to add to the reward cycle?", "Automagical Resources") as num|null
		if(Option>0&&!(Option in ResourceZPlanes))
			ResourceZPlanes.Add(Option)
			var/List="("
			var/Count=0
			for(var/x in global.ResourceZPlanes)
				Count++
				List+="[x]"
				if(Count<global.ResourceZPlanes.len)
					List+="; "
				else
					List+=")"
			Log("Admin","[ExtractInfo(src)] added Z plane [Option] to the resource generating Z plane list. [List]")
	Resource_Z_Plane_Remove()
		set category="Admin"
		var/Option=input(usr, "What Z plane would you like to remove from the reward cycle?", "Automagical Resources") in global.ResourceZPlanes
		global.ResourceZPlanes.Remove(Option)
		var/List="("
		var/Count=0
		for(var/x in global.ResourceZPlanes)
			Count++
			List+="[x]"
			if(Count<global.ResourceZPlanes.len)
				List+="; "
			else
				List+=")"
		Log("Admin", "[ExtractInfo(src)] removed Z plane [Option] from the resource generating Z plane list. [List]")
	Resource_Spots_Per_Reward()
		set category="Admin"
		var/Option=input(usr, "How many resource spots will appear each reward session?", "Resource Spots Per Reward") as num|null
		if(Option>0)
			Log("Admin", "[ExtractInfo(src)] set the number of resource spots generated per reward session to [Option] from [global.SpotsPerReward].")
			SpotsPerReward=Option

proc
	RSSpotGeneration(var/Specific=0, var/Specified=0)
		var/Count
		if(Specific&&Specified)
			Count=Specified
			while(Count>0)
				if(prob(1))
					RSMajor(rand(1,500), rand(1,500), Specific)
				else if(prob(24))
					RSLarge(rand(1,500), rand(1,500), Specific)
				else if(prob(50))
					RSMod(rand(1,500), rand(1,500), Specific)
				else if(prob(25))
					RSSmall(rand(1,500), rand(1,500), Specific)
				Count--
		else
			for(var/x in global.ResourceZPlanes)
				Count=global.SpotsPerReward
				while(Count>0)
					if(prob(1))
						RSMajor(rand(1,500), rand(1,500), x)
					else if(prob(24))
						RSLarge(rand(1,500), rand(1,500), x)
					else if(prob(50))
						RSMod(rand(1,500), rand(1,500), x)
					else if(prob(25))
						RSSmall(rand(1,500), rand(1,500), x)
					Count--
	RSMinor(var/X, var/Y, var/Z)
		new/obj/ResourceSpot/Minor(X, Y, Z)
	RSSmall(var/X, var/Y, var/Z)
		new/obj/ResourceSpot/Small(X, Y, Z)
	RSMod(var/X, var/Y, var/Z)
		new/obj/ResourceSpot/Moderate(X, Y, Z)
	RSLarge(var/X, var/Y, var/Z)
		new/obj/ResourceSpot/Large(X, Y, Z)
	RSMajor(var/X, var/Y, var/Z)
		new/obj/ResourceSpot/Major(X, Y, Z)


obj
	ResourceSpot
		Attackable=0
		Destructable=0
		Grabbable=0
		Savable=1
		invisibility=98
		alpha=50
		var/Value//Holds the value of the resource generated by this spot.
		var/ValueMax//Holds the value of the resource spot when it was full.
		var/DigAmount=0
		var/DigTimer=0
		icon='SparkleGreen.dmi'//naturally invisible
		name="Natural Resource"
		Click()
			if(!src.ValueMax)
				if(src.Using)
					return
				src.Using=1
				if(get_dist(src, usr) >=4)
					src.Using=0
					return
				if(src.DigTimer>world.realtime)
					usr << "The source didn't recover yet!"
					src.Using=0
					return
				if(usr.TotalFatigue>50)
					usr << "You're too spent to keep digging!"
					src.Using=0
					return
				var/ConfirmS=alert(usr, "Do you want to dig for resources? This will provide some immediate profit, but will exhaust you.", "Dig?", "No", "Yes")
				if(ConfirmS=="Yes")
					usr.GiveMoney(0.02*src.Value)
					usr.GainFatigue(50)
					src.DigAmount++
					if(src.DigAmount>=25)
						src.DigAmount=0
						src.DigTimer=world.realtime+Day(7)
					src.Using=0
					return
				else
					src.Using=0
			if(usr.EngineeringUnlocked>=1)
				if(src.Using)
					return
				for(var/obj/Items/Tech/NuDrill/ND in range(1, src))
					usr << "There's already a drill mining this spot!"
					return
				src.Using=1
				var/Cost=glob.progress.EconomyCost
				var/Confirm=alert(usr, "Do you want to build a drill on this resource spot?  It will cost [Commas(round(Cost))] [glob.progress.MoneyName].", "Build Drill?", "No", "Yes")
				if(!usr.HasMoney(Cost))
					usr << "You don't have enough money to build a drill!"
					src.Using=0
					return
				if(Confirm=="No")
					src.Using=0
					return
				usr.TakeMoney(Cost)
				new/obj/Items/Tech/NuDrill(src.x, src.y, src.z)
				usr << "You create a drill to mine [src]!"
				src.ValueMax=1
				src.Using=0
		Minor
			suffix="(Minor)"
			New(var/X, var/Y, var/Z)
				..()
				src.loc=locate(X,Y,Z)
				if(!src.Value)
					src.Value=(glob.progress.EconomyIncome)
				src.transform*=1
		Small
			suffix="(Small)"
			New(var/X, var/Y, var/Z)
				..()
				src.loc=locate(X,Y,Z)
				if(!src.Value)
					src.Value=(glob.progress.EconomyIncome*2)
				src.transform*=2
		Moderate
			suffix="(Moderate)"
			New(var/X, var/Y, var/Z)
				..()
				src.loc=locate(X,Y,Z)
				if(!src.Value)
					src.Value=(glob.progress.EconomyIncome*4)
				src.transform*=2.5
		Large
			suffix="(Large)"
			New(var/X, var/Y, var/Z)
				..()
				src.loc=locate(X,Y,Z)
				if(!src.Value)
					src.Value=(glob.progress.EconomyIncome*6)
				src.transform*=3
		Major
			suffix="(Major)"
			New(var/X, var/Y, var/Z)
				..()
				src.loc=locate(X,Y,Z)
				if(!src.Value)
					src.Value=(glob.progress.EconomyIncome*30)
				src.transform*=5
		proc
			GetValue(var/Insight)
				if(Insight>=5)
					return "[Commas(src.Value)]"
				if(src.Value<=glob.progress.EconomyIncome)
					return "Minor"
				if(src.Value<=glob.progress.EconomyIncome*2)
					return "Small"
				if(src.Value<=glob.progress.EconomyIncome*4)
					return "Moderate"
				if(src.Value<glob.progress.EconomyIncome*6)
					return "Large"
				if(src.Value>=glob.progress.EconomyIncome*30)
					return "Major"

	Items
		Tech
			NuDrill
				icon='Drill Giant.dmi'
				name="Auto Drill"
				pixel_x=-8
				density=1
				Pickable=0
				Grabbable=0
				var/last_extracted_by
				var/Value//holds the amount of money that has been dug up.
				New(var/X, var/Y, var/Z)
					..()
					src.loc=locate(X, Y, Z)
					for(var/obj/ResourceSpot/s in range(1, src))
						src.InternalTimer=world.realtime
						return
				Click()
					if(src in range(1, usr))
						for(var/obj/ResourceSpot/RS in range(1, src))
							if(world.realtime>src.InternalTimer+Hour())
								var/Dif=world.realtime-src.InternalTimer
								var/Extract
								Extract=(RS.Value/Day(5)*Dif)
								if(Extract>RS.Value)
									Extract=RS.Value
								usr.GiveMoney(Extract)
								OMsg(usr, "[usr] extracts [Commas(round(Extract))] [glob.progress.MoneyName] from the [src]!")
								last_extracted_by = "[usr]([usr.key])"
								src.InternalTimer=world.realtime
								return
							else
								usr << "Wait at least an hour in between extractions."
				verb/Dismantle()
					set src in range(1, usr)
					if(locate(/obj/Skills/Utility/Smelt, usr))
						usr.GiveMoney(0.5*glob.progress.EconomyCost)
						usr << "You dismantle the drill and smelt down the parts to reclaim the cost."
					else
						usr << "You dismantle the drill."
					del src